import logging
import os
from handlers.registration import start_registration, check_user_exists
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.menu_kb import (
    get_main_menu_keyboard, get_start_keyboard, get_event_rules_keyboard, 
    get_rules_detail_keyboard, get_back_button
)
from utils.states import MainState

router = Router()
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–µ–Ω—é
class MenuStates(StatesGroup):
    waiting_for_rules_confirmation = State()
    showing_rules = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        welcome_image_path = os.path.join("static", "welcome.jpg")
        
        if os.path.exists(welcome_image_path):
            welcome_image = FSInputFile(welcome_image_path)
            await message.answer_photo(
                photo=welcome_image,
                caption="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π! "
                        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π, –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ª—é–±–æ–≥–æ –≤–∏–¥–∞ –¥–æ—Å—É–≥–∞ "
                        "–∏–ª–∏ –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –Ω–∞ —Å–≤–æ–µ–º –ø—É—Ç–∏!) –í –æ–±—â–µ–º –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É \"–°–¢–ê–†–¢\" –∏ –ø–æ–µ—Ö–∞–ª–∏!",
                reply_markup=get_start_keyboard()
            )
        else:
            logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {welcome_image_path}")
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π! "
                "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π, –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ª—é–±–æ–≥–æ –≤–∏–¥–∞ –¥–æ—Å—É–≥–∞ "
                "–∏–ª–∏ –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –Ω–∞ —Å–≤–æ–µ–º –ø—É—Ç–∏!) –í –æ–±—â–µ–º –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É \"–°–¢–ê–†–¢\" –∏ –ø–æ–µ—Ö–∞–ª–∏!",
                reply_markup=get_start_keyboard()
            )
        
        await state.set_state(MainState.waiting_for_start)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç \"–Ø —Å –í–∞–º–∏\"!</b> üåü\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ª—é–±–æ–≥–æ –≤–∏–¥–∞ –¥–æ—Å—É–≥–∞ –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üë• –ù–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
        "‚Ä¢ üéâ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
        "‚Ä¢ üîç –ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ\n"
        "‚Ä¢ ‚≠ê –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n"
        "<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\" –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n"
        "3. –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ\n"
        "4. –ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!\n\n"
        "<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π\" –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )
    
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_menu_keyboard())

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –°–¢–ê–†–¢
@router.callback_query(F.data == "start_bot")
async def process_start_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –°–¢–ê–†–¢"""
    await callback.answer()
    
    try:
        current_state = await state.get_state()
        logger.info(f"–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –°–¢–ê–†–¢ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
        
        welcome_text = (
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:\n\n"
            "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n"
            "‚ûï <b>–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</b> - –æ—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
            "üëÄ <b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b> - –Ω–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
            "üìö <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b> - –ø—Ä–∞–≤–∏–ª–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n"
            "üí° <i>–ï—Å–ª–∏ –≤—ã –≤–ø–µ—Ä–≤—ã–µ –∑–¥–µ—Å—å, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –∏–∑—É—á–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π!</i>"
        )
        
        await callback.message.answer(
            welcome_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_start_button: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
            reply_markup=get_main_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é –±–æ—Ç–∞
@router.message(Command("profile"))
async def cmd_profile(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /profile –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await show_profile(message, state)

@router.message(Command("create"))
async def cmd_create(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create"""
    await create_event(message, state)

@router.message(Command("events"))
async def cmd_events(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /events"""
    await view_events(message)

@router.message(Command("knowledge"))
async def cmd_knowledge(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /knowledge"""
    await knowledge_base(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å ReplyKeyboard
@router.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'")
    
    try:
        user_exists = await check_user_exists(message.from_user.id)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç = {user_exists}")
        
        if not user_exists:
            await start_registration(message, state)
        else:
            await message.answer(
                "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...\n"
                "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_profile: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )

@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def create_event(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª '–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'")
    
    rules_text = (
        "üìã <b>–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n"
        "–ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ "
        "–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ.\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å "
        "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
    )
    
    await message.answer(
        rules_text,
        parse_mode="HTML",
        reply_markup=get_event_rules_keyboard()
    )
    await state.set_state(MenuStates.waiting_for_rules_confirmation)

@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def view_events(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'")
    
    events_text = (
        "üëÄ <b>–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</b>\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
        "1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "2. –£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
        "3. –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —É–≤–∏–¥–∏—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ!"
    )
    
    await message.answer(events_text, parse_mode="HTML")

@router.message(F.text == "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
async def knowledge_base(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'")
    
    knowledge_text = (
        "üìö <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –±–æ—Ç–∞ \"–Ø —Å –í–∞–º–∏\"</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
        "–¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\n\n"
        "üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
    )
    
    knowledge_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="knowledge_creation_rules")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö", callback_data="knowledge_participation_rules")],
            [InlineKeyboardButton(text="‚≠ê –û —Å–∏—Å—Ç–µ–º–µ —Ä–µ–π—Ç–∏–Ω–≥–∞", callback_data="knowledge_rating_system")],
            [InlineKeyboardButton(text="üëë –û VIP-—Å—Ç–∞—Ç—É—Å–µ", callback_data="knowledge_vip_status")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ \"–Ø —Å –í–∞–º–∏\"", callback_data="knowledge_about_project")],
            [InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="knowledge_faq")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
    )
    
    await message.answer(
        knowledge_text,
        parse_mode="HTML",
        reply_markup=knowledge_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª
@router.callback_query(F.data == "show_rules")
async def show_rules_menu(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=get_rules_detail_keyboard()
    )
    await state.set_state(MenuStates.showing_rules)

@router.callback_query(F.data == "event_creation_rules")
async def show_creation_rules(callback: CallbackQuery):
    await callback.answer()
    rules_text = """üìã <b>–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</b>

<b>1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è</b>
‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –æ–±—â–µ–Ω–∏–µ, —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –¥–æ—Å—É–≥ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –≤—ã–≥–æ–¥–æ–π –∏–ª–∏ –Ω–∞—Ä—É—à–∞—é—â–∏–µ –∑–∞–∫–æ–Ω—ã –†–§
‚Ä¢ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ

<b>2. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é</b>
‚ùå <b>–ù–µ–ª—å–∑—è:</b>
‚Ä¢ –£–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
‚Ä¢ –£–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è
‚Ä¢ –†–∞–∑–º–µ—â–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –∏–ª–∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞

‚úÖ <b>–ú–æ–∂–Ω–æ:</b>
‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
‚Ä¢ –£–∫–∞–∑—ã–≤–∞—Ç—å –º–µ—Å—Ç–æ, –≤—Ä–µ–º—è, –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∑—è—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–µ—â–∏

<b>3. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞</b>
‚Ä¢ –í—ã –æ–±—è–∑—É–µ—Ç–µ—Å—å –±—ã—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–≤–µ–¥–æ–º–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∏–Ω–∏–º—É–º –∑–∞ 6 —á–∞—Å–æ–≤
‚Ä¢ –ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤–µ–¥–µ—Ç –∫ —Å–Ω–∏–∂–µ–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    
    await callback.message.edit_text(
        rules_text,
        parse_mode="HTML",
        reply_markup=get_back_button()
    )

@router.callback_query(F.data == "event_registration_rules")
async def show_registration_rules(callback: CallbackQuery):
    await callback.answer()
    rules_text = """üìã <b>–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</b>

<b>1. –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è</b>
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ –ø–æ–ª—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è "–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π" - –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, –ª—É—á—à–µ –Ω–µ –∑–∞–Ω–∏–º–∞–π—Ç–µ –º–µ—Å—Ç–æ

<b>2. –ü–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏</b>
‚ùå <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>
‚Ä¢ –û—Å–∫–æ—Ä–±–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ü—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –Ω–µ—Ç—Ä–µ–∑–≤–æ–º –≤–∏–¥–µ
‚Ä¢ –ü–æ–∫–∏–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b>
‚Ä¢ –ë—ã—Ç—å –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω—ã–º –∏ —É–≤–∞–∂–∞—Ç—å –≤—Ä–µ–º—è –¥—Ä—É–≥–∏—Ö
‚Ä¢ –°–æ–±–ª—é–¥–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è

<b>3. –û—Ç–º–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è</b>
‚Ä¢ –û—Ç–º–µ–Ω—è–π—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞ 12 —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞
‚Ä¢ –ß–∞—Å—Ç—ã–µ –æ—Ç–∫–∞–∑—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç —Å–Ω–∏–∂–∞—é—Ç —Ä–µ–π—Ç–∏–Ω–≥

<b>–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π:</b>
‚Ä¢ –ü–µ—Ä–≤–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ ‚Üí –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ ‚Üí —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ (-10 –±–∞–ª–ª–æ–≤)
‚Ä¢ –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è ‚Üí –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"""
    
    await callback.message.edit_text(
        rules_text,
        parse_mode="HTML",
        reply_markup=get_back_button()
    )

@router.callback_query(F.data == "back_to_rules")
async def back_to_rules_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=get_rules_detail_keyboard()
    )

@router.callback_query(F.data == "accept_rules")
async def accept_rule(callback: CallbackQuery):
    await callback.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∞–≤–∏–ª–∞")
    await show_rules_menu(callback, None)

@router.callback_query(F.data == "accept_all_rules")
async def accept_all_rules(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_user_exists(callback.from_user.id):
        success_text = (
            "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
            "–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è:"
        )
        
        profile_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="start_profile_registration")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
        )
        
        await callback.message.answer(
            success_text,
            parse_mode="HTML",
            reply_markup=profile_keyboard
        )
    else:
        success_text = (
            "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
            "–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω.\n\n"
            "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n"
            "üîß <i>–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.</i>"
        )
        
        await callback.message.answer(
            success_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
    
    await state.clear()

@router.callback_query(F.data == "start_profile_registration")
async def start_profile_from_rules(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        await callback.message.delete()
    except:
        pass
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await start_registration(callback.message, state)

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    await callback.message.answer(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
@router.callback_query(F.data == "knowledge_creation_rules")
async def show_knowledge_creation_rules(callback: CallbackQuery):
    await callback.answer()
    await show_creation_rules(callback)

@router.callback_query(F.data == "knowledge_participation_rules")
async def show_knowledge_participation_rules(callback: CallbackQuery):
    await callback.answer()
    await show_registration_rules(callback)

@router.callback_query(F.data == "knowledge_rating_system")
async def show_knowledge_rating_system(callback: CallbackQuery):
    await callback.answer()
    rating_text = """‚≠ê <b>–°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞</b>

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥:</b>
‚Ä¢ –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ 100 –±–∞–ª–ª–∞–º–∏
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–æ–∫ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –í–ª–∏—è–µ—Ç –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö

<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:</b>
‚≠ê 1 –∑–≤–µ–∑–¥–∞ = -10 –±–∞–ª–ª–æ–≤
‚≠ê‚≠ê 2 –∑–≤–µ–∑–¥—ã = -5 –±–∞–ª–ª–æ–≤  
‚≠ê‚≠ê‚≠ê 3 –∑–≤–µ–∑–¥—ã = 0 –±–∞–ª–ª–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
‚≠ê‚≠ê‚≠ê‚≠ê 4 –∑–≤–µ–∑–¥—ã = +5 –±–∞–ª–ª–æ–≤
‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5 –∑–≤–µ–∑–¥ = +10 –±–∞–ª–ª–æ–≤

<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:</b>
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ <20: –∑–∞–ø—Ä–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ 0: –ø–æ–ª–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞

<b>–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥:</b>
‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ –ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    
    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ù–∞–∑–∞–¥ –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π", callback_data="back_to_knowledge")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
    )
    
    await callback.message.edit_text(
        rating_text,
        parse_mode="HTML",
        reply_markup=back_keyboard
    )

@router.callback_query(F.data == "knowledge_vip_status")
async def show_knowledge_vip_status(callback: CallbackQuery):
    await callback.answer()
    vip_text = """üëë <b>VIP-—Å—Ç–∞—Ç—É—Å</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 1500 —Ç–æ–∫–µ–Ω–æ–≤ (1 —Ç–æ–∫–µ–Ω = 1 —Ä—É–±–ª—å)
<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 30 –¥–Ω–µ–π

<b>–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
‚Ä¢ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ 3 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫—Ä—ã–≤–∞—Ç—å —Å–≤–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–∞—Ö

<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å VIP:</b>
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
2. –í—ã–±–µ—Ä–∏—Ç–µ "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VIP"
3. –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω–∞–º–∏
4. –ü–æ–ª—É—á–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∞ 30 –¥–Ω–µ–π

<b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:</b>
–ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ —Å—Ç–∞—Ç—É—Å –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é."""
    
    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ù–∞–∑–∞–¥ –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π", callback_data="back_to_knowledge")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
    )
    
    await callback.message.edit_text(
        vip_text,
        parse_mode="HTML",
        reply_markup=back_keyboard
    )

@router.callback_query(F.data == "knowledge_about_project")
async def show_knowledge_about_project(callback: CallbackQuery):
    await callback.answer()
    about_text = """‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ "–Ø —Å –í–∞–º–∏"</b>

<b>–ù–∞—à–∞ –º–∏—Å—Å–∏—è:</b>
–ü–æ–º–æ—á—å –ª—é–¥—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –¥–æ—Å—É–≥.

<b>–î–ª—è –∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç:</b>
‚Ä¢ –¢–µ—Ö, –∫—Ç–æ –ø–µ—Ä–µ–µ—Ö–∞–ª –≤ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥
‚Ä¢ –õ—é–¥–µ–π, –∏—â—É—â–∏—Ö –¥—Ä—É–∑–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º  
‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π

<b>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</b>
‚Ä¢ –£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ä–µ–¥—É –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
‚Ä¢ –°–∏—Å—Ç–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
‚Ä¢ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—É–≥–∞

<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
–ú—ã —Å–ª–µ–¥–∏–º –∑–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    
    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ù–∞–∑–∞–¥ –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π", callback_data="back_to_knowledge")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
    )
    
    await callback.message.edit_text(
        about_text,
        parse_mode="HTML",
        reply_markup=back_keyboard
    )

@router.callback_query(F.data == "knowledge_faq")
async def show_knowledge_faq(callback: CallbackQuery):
    await callback.answer()
    faq_text = """‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>

<b>‚ùî –ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?</b>
–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –∏ –∏–∑—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞.

<b>‚ùî –ú–æ–∂–Ω–æ –ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –±–µ—Å–ø–ª–∞—Ç–Ω–æ?</b>
–î–∞, –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã.

<b>‚ùî –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ —Å–Ω–∏–∑–∏–ª—Å—è?</b>
–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –ø–æ–ª—É—á–∞–π—Ç–µ —Ö–æ—Ä–æ—à–∏–µ –æ—Ü–µ–Ω–∫–∏, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞.

<b>‚ùî –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?</b>
–û—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –º–∏–Ω–∏–º—É–º –∑–∞ 12 —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞.

<b>‚ùî –ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–æ–∫–µ–Ω—ã –∏ –∫–∞–∫ –∏—Ö –ø–æ–ª—É—á–∏—Ç—å?</b>
–¢–æ–∫–µ–Ω—ã - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ –¥–ª—è VIP-—Ñ—É–Ω–∫—Ü–∏–π. –ü—Ä–∏–æ–±—Ä–µ—Ç–∞—é—Ç—Å—è –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏.

<b>‚ùî –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?</b>
–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ —á–∞—Ç–µ - –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!"""
    
    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ù–∞–∑–∞–¥ –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π", callback_data="back_to_knowledge")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
    )
    
    await callback.message.edit_text(
        faq_text,
        parse_mode="HTML",
        reply_markup=back_keyboard
    )

@router.callback_query(F.data == "back_to_knowledge")
async def back_to_knowledge_menu(callback: CallbackQuery):
    await callback.answer()
    await knowledge_base(callback.message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def process_other_messages(message: Message):
    if message.text and message.text.startswith('/'):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
        await message.answer(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
        await message.answer(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
            reply_markup=get_main_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback_query
@router.callback_query()
async def process_unknown_callback(callback: CallbackQuery):
    logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {callback.data}")
    await callback.answer("üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
