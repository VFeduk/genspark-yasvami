import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode

from keyboards.main_menu import get_main_menu_keyboard
from database.db import get_async_session
from database.models import User, Gender, UserType
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç IntegrityError

router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_gender = State()
    waiting_for_about = State()

async def check_user_exists(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id.
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é.
    """
    try:
        async with get_async_session() as session: # –°–µ—Å—Å–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å
            result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalar_one_or_none()
            return user is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –ó–¥–µ—Å—å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ session.rollback(), —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞–µ–º.
        return False

async def start_registration(message: Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    user_id = message.from_user.id
    
    if await check_user_exists(user_id):
        await message.answer(
            "üë§ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear() 
        return
    
    welcome_text = (
        "üëã <b>–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!</b>\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. "
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\n"
        "üèôÔ∏è <b>–®–∞–≥ 1 –∏–∑ 5: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å:"
    )
    
    await message.answer(welcome_text, parse_mode=ParseMode.HTML)
    await state.set_state(RegistrationStates.waiting_for_city)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@router.message(RegistrationStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞"""
    city = message.text.strip().title()
    
    if len(city) < 2 or len(city) > 50:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        return
    
    await state.update_data(city=city)
    
    await message.answer(
        f"‚úÖ –ì–æ—Ä–æ–¥: <b>{city}</b>\n\n"
        f"üë§ <b>–®–∞–≥ 2 –∏–∑ 5: –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∏–ª–∏ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—Å –Ω–∞–∑—ã–≤–∞–ª–∏ –≤ –±–æ—Ç–µ):",
        parse_mode=ParseMode.HTML
    )
    
    await state.set_state(RegistrationStates.waiting_for_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≥–æ—Ä–æ–¥: {city}")

@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    
    if len(name) < 2 or len(name) > 30:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤:"
        )
        return
    
    await state.update_data(full_name=name)
    
    await message.answer(
        f"‚úÖ –ò–º—è: <b>{name}</b>\n\n"
        f"üéÇ <b>–®–∞–≥ 3 –∏–∑ 5: –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 80 –ª–µ—Ç):",
        parse_mode=ParseMode.HTML
    )
    
    await state.set_state(RegistrationStates.waiting_for_age)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–º—è: {name}")

@router.message(RegistrationStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(message.text.strip())
        
        if age < 16 or age > 80:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 16 –¥–æ 80 –ª–µ—Ç:"
            )
            return
        
        await state.update_data(age=age)
        
        await message.answer(
            f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: <b>{age} –ª–µ—Ç</b>\n\n"
            f"üë´ <b>–®–∞–≥ 4 –∏–∑ 5: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª</b>\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ '–ú' –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞ –∏–ª–∏ '–ñ' –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ:",
            parse_mode=ParseMode.HTML
        )
        
        await state.set_state(RegistrationStates.waiting_for_gender)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≤–æ–∑—Ä–∞—Å—Ç: {age}")
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25"
        )

@router.message(RegistrationStates.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    gender_input = message.text.strip().upper()
    
    gender = None
    gender_text = None

    if gender_input in ['–ú', '–ú–£–ñ–°–ö–û–ô', 'M', 'MALE']:
        gender = Gender.MALE.value
        gender_text = '–ú—É–∂—Å–∫–æ–π'
    elif gender_input in ['–ñ', '–ñ–ï–ù–°–ö–ò–ô', 'F', 'FEMALE']:
        gender = Gender.FEMALE.value
        gender_text = '–ñ–µ–Ω—Å–∫–∏–π'
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '–ú' –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞ –∏–ª–∏ '–ñ' –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞:"
        )
        return
    
    await state.update_data(gender=gender)
    
    await message.answer(
        f"‚úÖ –ü–æ–ª: <b>{gender_text}</b>\n\n"
        f"üìù <b>–®–∞–≥ 5 –∏–∑ 5: –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ</b>\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –æ —Å–µ–±–µ, –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏–ª–∏ —Ö–æ–±–±–∏ "
        f"(–æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):",
        parse_mode=ParseMode.HTML
    )
    
    await state.set_state(RegistrationStates.waiting_for_about)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª: {gender_text}")

@router.message(RegistrationStates.waiting_for_about)
async def process_about(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    about = message.text.strip()
    
    if len(about) < 10 or len(about) > 500:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:"
        )
        return
    
    await state.update_data(about_me=about)
    
    user_data = await state.get_data()
    
    success = await save_user_to_db(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        user_data=user_data
    )
    
    if success:
        summary_text = (
            f"üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìã <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {user_data['city']}\n"
            f"üë§ –ò–º—è: {user_data['full_name']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"üë´ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_data['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n\n"
            f"‚≠ê –í–∞—à –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 100 –±–∞–ª–ª–æ–≤\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö!"
        )
        
        await message.answer(
            summary_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu_keyboard()
        )
        
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()

async def save_user_to_db(telegram_id: int, username: str | None, user_data: dict) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏ –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –º–æ–¥–µ–ª–∏.
    """
    session = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ except –±–ª–æ–∫–∞—Ö
    try:
        async with get_async_session() as session:
            new_user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=user_data['full_name'],
                display_name=user_data['full_name'],
                city=user_data['city'],
                age=user_data['age'],
                gender=Gender(user_data['gender']),
                about=user_data['about_me'],
                rating=100,
                tokens=0,
                user_type=UserType.REGULAR
            )
            
            session.add(new_user)
            await session.commit()
            return True
            
    except IntegrityError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        if session: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ session —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–∑—ã–≤–∞—Ç—å rollback
            await session.rollback()
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        if session: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ session —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await session.rollback()
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await start_registration(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–¢–ê–†–¢" –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
@router.callback_query(F.data == "start_button")
async def handle_start_button(callback: CallbackQuery, state: FSMContext):
    # CallbackQuery –Ω–µ –∏–º–µ–µ—Ç message, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞–µ–º callback.message
    # –í–∞–∂–Ω–æ: callback.message –º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.
    # –î–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å callback.message, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å,
    # –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å Message –æ–±—ä–µ–∫—Ç –∏–∑ callback.from_user
    if callback.message:
        await start_registration(callback.message, state)
    else:
        # –ï—Å–ª–∏ message –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º "—Ñ–µ–π–∫–æ–≤–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è start_registration
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –¥–ª—è –±–æ–ª–µ–µ robust —Ä–µ—à–µ–Ω–∏—è –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å Message
        # –∏–∑ callback.from_user –∏ bot
        logger.warning(f"CallbackQuery –±–µ–∑ message –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        # –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, –µ—Å–ª–∏ message.text –Ω—É–∂–µ–Ω
        fake_message = Message(
            message_id=callback.id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID callback'–∞ –∫–∞–∫ ID —Å–æ–æ–±—â–µ–Ω–∏—è
            from_user=callback.from_user,
            chat=callback.message.chat if callback.message else None, # –ï—Å–ª–∏ callback.message None, chat —Ç–æ–∂–µ None
            date=callback.message.date if callback.message else None,
            text="/start", # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
            bot=callback.bot # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        )
        await start_registration(fake_message, state)
        
    await callback.answer() # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
