import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.menu_kb import get_main_menu_keyboard, get_gender_selection_keyboard, get_city_selection_keyboard
from database.db import get_async_session
from database.models import User
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_city = State()
    entering_custom_city = State()
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_gender = State()
    waiting_for_about = State()

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
POPULAR_CITIES = [
    "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    "–ö–∞–∑–∞–Ω—å", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–°–∞–º–∞—Ä–∞",
    "–û–º—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
    "–í–æ—Ä–æ–Ω–µ–∂", "–ü–µ—Ä–º—å", "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
    "–°–∞—Ä–∞—Ç–æ–≤", "–¢—é–º–µ–Ω—å", "–¢–æ–ª—å—è—Ç—Ç–∏", "–ò–∂–µ–≤—Å–∫"
]

async def check_user_exists(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    async with get_async_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        return result.scalar_one_or_none() is not None

async def start_registration(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_user_exists(user_id):
        await message.answer(
            "üë§ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    welcome_text = (
        "üëã <b>–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!</b>\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. "
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\n"
        "üèôÔ∏è <b>–®–∞–≥ 1 –∏–∑ 5: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥\":"
    )
    
    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=get_city_selection_keyboard(POPULAR_CITIES[:8])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 –≥–æ—Ä–æ–¥–æ–≤
    )
    
    await state.set_state(RegistrationStates.waiting_for_city)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@router.callback_query(F.data.startswith("city_"), RegistrationStates.waiting_for_city)
async def process_city_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    city = callback.data.split("_", 1)[1]
    
    if city == "other":
        await callback.answer()
        await callback.message.edit_text(
            "üèôÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:</b>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.",
            parse_mode="HTML"
        )
        await state.set_state(RegistrationStates.entering_custom_city)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    await state.update_data(city=city)
    await callback.answer()
    
    await callback.message.edit_text(
        f"‚úÖ –ì–æ—Ä–æ–¥: <b>{city}</b>\n\n"
        f"üë§ <b>–®–∞–≥ 2 –∏–∑ 5: –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∏–ª–∏ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—Å –Ω–∞–∑—ã–≤–∞–ª–∏ –≤ –±–æ—Ç–µ):",
        parse_mode="HTML"
    )
    
    await state.set_state(RegistrationStates.waiting_for_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {city}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
@router.message(RegistrationStates.entering_custom_city)
async def process_custom_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é"""
    city = message.text.strip().title()
    
    if len(city) < 2 or len(city) > 50:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    await state.update_data(city=city)
    
    await message.answer(
        f"‚úÖ –ì–æ—Ä–æ–¥: <b>{city}</b>\n\n"
        f"üë§ <b>–®–∞–≥ 2 –∏–∑ 5: –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∏–ª–∏ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—Å –Ω–∞–∑—ã–≤–∞–ª–∏ –≤ –±–æ—Ç–µ):",
        parse_mode="HTML"
    )
    
    await state.set_state(RegistrationStates.waiting_for_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≥–æ—Ä–æ–¥: {city}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    
    if len(name) < 2 or len(name) > 30:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(full_name=name)
    
    await message.answer(
        f"‚úÖ –ò–º—è: <b>{name}</b>\n\n"
        f"üéÇ <b>–®–∞–≥ 3 –∏–∑ 5: –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 80 –ª–µ—Ç):",
        parse_mode="HTML"
    )
    
    await state.set_state(RegistrationStates.waiting_for_age)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–º—è: {name}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.message(RegistrationStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(message.text.strip())
        
        if age < 16 or age > 80:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 16 –¥–æ 80 –ª–µ—Ç:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        await state.update_data(age=age)
        
        await message.answer(
            f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: <b>{age} –ª–µ—Ç</b>\n\n"
            f"üë´ <b>–®–∞–≥ 4 –∏–∑ 5: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            parse_mode="HTML",
            reply_markup=get_gender_selection_keyboard()
        )
        
        await state.set_state(RegistrationStates.waiting_for_gender)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≤–æ–∑—Ä–∞—Å—Ç: {age}")
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
@router.callback_query(F.data.startswith("gender_"), RegistrationStates.waiting_for_gender)
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    gender = callback.data.split("_")[1]
    gender_text = "–ú—É–∂—Å–∫–æ–π" if gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª
    await state.update_data(gender=gender)
    await callback.answer()
    
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª: <b>{gender_text}</b>\n\n"
        f"üìù <b>–®–∞–≥ 5 –∏–∑ 5: –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ</b>\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –æ —Å–µ–±–µ, –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏–ª–∏ —Ö–æ–±–±–∏ "
        f"(–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤).\n\n"
        f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ª—É—á—à–µ –≤–∞—Å —É–∑–Ω–∞—Ç—å!",
        parse_mode="HTML"
    )
    
    await state.set_state(RegistrationStates.waiting_for_about)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª: {gender_text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
@router.message(RegistrationStates.waiting_for_about)
async def process_about(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ"""
    about = message.text.strip()
    
    if len(about) < 10 or len(about) > 500:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏–ª–∏ —Ö–æ–±–±–∏:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
    await state.update_data(about_me=about)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await save_user_to_db(message.from_user.id, message.from_user.username, user_data)
    
    if success:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        summary_text = (
            f"üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìã <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {user_data['city']}\n"
            f"üë§ –ò–º—è: {user_data['full_name']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"üë´ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_data['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
            f"üìù –û —Å–µ–±–µ: {about}\n\n"
            f"‚≠ê –í–∞—à –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 100 –±–∞–ª–ª–æ–≤\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
        )
        
        await message.answer(
            summary_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()

async def save_user_to_db(telegram_id: int, username: str, user_data: dict) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with get_async_session() as session:
            new_user = User(
                telegram_id=telegram_id,
                username=username,
                full_name=user_data['full_name'],
                city=user_data['city'],
                age=user_data['age'],
                gender=user_data['gender'],
                about_me=user_data['about_me'],
                rating=100  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            )
            
            session.add(new_user)
            await session.commit()
            return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return False
